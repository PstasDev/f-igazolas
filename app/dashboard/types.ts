// Types for table display (mapped from API types)

export interface IgazolasTableRow {
  id: string;
  studentId: string;
  studentName: string;
  studentClass: string;
  type: string;
  date: string;
  hours: number[];
  correctedHours?: number[]; // Added for student corrections
  status: string;
  reason?: string; // Student's reason/note - separate from status
  imageUrl?: string;
  imgDriveURL?: string; // Added to match API response
  bkk_verification?: string | object; // BKKVerification data (can be string or object)
  teacherNote?: string;
  submittedAt: string;
  reviewedAt?: string;
  reviewedBy?: string;
  allapot: 'F√ºgg≈ëben' | 'Elfogadva' | 'Elutas√≠tva'; // Updated to match Django model
  fromFTV?: boolean;
  minutesBefore?: number;
  minutesAfter?: number;
}

export interface IgazolasType {
  name: string;
  emoji: string;
  color: string;
  category: string;
  beleszamit: boolean;
  iskolaerdeku: boolean;
  description: string;
}

export const igazolasTypes: Record<string, IgazolasType> = {
  'st√∫di√≥s t√°voll√©t': {
    name: 'Studi√≥s T√°voll√©t',
    emoji: 'üé¨',
    color: 'bg-teal-100 text-teal-800 border-teal-300 dark:bg-teal-900/30 dark:text-teal-300 dark:border-teal-500',
    category: 'Iskola√©rdek≈± T√°voll√©t',
    beleszamit: false,
    iskolaerdeku: true,
    description: 'Ezen id≈ëpontban a tanul√≥ iskola√©rdek≈± tev√©kenys√©get v√©gzett a St√∫di√≥ keretein bel√ºl'
  },  
  'm√©di√°s t√°voll√©t': {
    name: 'M√©di√°s T√°voll√©t',
    emoji: 'üì∫',
    color: 'bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-500',
    category: 'Iskola√©rdek≈± T√°voll√©t',
    beleszamit: false,
    iskolaerdeku: true,
    description: 'Ezen id≈ëpontban a tanul√≥ iskola√©rdek≈±, M√©dia tagozattal kapcsolatos tev√©kenys√©get v√©gzett'
  },
  'orvosi igazol√°s': {
    name: 'Orvosi Igazol√°s',
    emoji: 'üè•',
    color: 'bg-red-100 text-red-800 border-red-300 dark:bg-red-900/30 dark:text-red-300 dark:border-red-500',
    category: 'Orvosi igazol√°s',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ orvosi ell√°t√°sban r√©szes√ºlt'
  },
  'csal√°di okok': {
    name: 'Csal√°di Okok',
    emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    color: 'bg-amber-100 text-amber-800 border-amber-300 dark:bg-amber-900/30 dark:text-amber-300 dark:border-amber-500',
    category: 'Sz√ºl≈ëi igazol√°s',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ csal√°di okok miatt volt t√°vol'
  },
  'k√∂zleked√©s': {
    name: 'K√∂zleked√©s',
    emoji: 'üöá',
    color: 'bg-orange-100 text-orange-800 border-orange-300 dark:bg-orange-900/30 dark:text-orange-300 dark:border-orange-500',
    category: 'K√∂zleked√©si probl√©ma',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ k√∂zleked√©si probl√©m√°k miatt nem tudott r√©szt venni az √≥r√°n'
  },
  'egy√©b': {
    name: 'Egy√©b',
    emoji: 'üìù',
    color: 'bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-800/30 dark:text-gray-300 dark:border-gray-500',
    category: 'Egy√©b',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'Egy√©b okok miatt volt t√°vol a tanul√≥'
  }
};

const typeMappings: Record<string, string> = {
  'sz√ºl≈ëi igazol√°s': 'csal√°di okok',
  'beteg': 'orvosi igazol√°s',
  'studi√≥s t√°voll√©t': 'st√∫di√≥s t√°voll√©t', // Handle version without accent
};

// Helper function to normalize Hungarian accented characters
function normalizeHungarianText(text: string): string {
  return text
    .toLowerCase()
    .replace(/√°/g, 'a')
    .replace(/√©/g, 'e')
    .replace(/√≠/g, 'i')
    .replace(/√≥/g, 'o')
    .replace(/√∂/g, 'o')
    .replace(/≈ë/g, 'o')
    .replace(/√∫/g, 'u')
    .replace(/√º/g, 'u')
    .replace(/≈±/g, 'u');
}

export function getIgazolasType(typeName: string): IgazolasType {
  const normalized = typeName.toLowerCase();
  
  // Try exact match first
  let mapped = typeMappings[normalized] || normalized;
  
  // If no exact match, try with normalized Hungarian characters
  if (!igazolasTypes[mapped]) {
    const normalizedAccents = normalizeHungarianText(normalized);
    mapped = typeMappings[normalizedAccents] || normalizedAccents;
    
    // Also check if we have a match when normalizing the keys
    if (!igazolasTypes[mapped]) {
      for (const key of Object.keys(igazolasTypes)) {
        if (normalizeHungarianText(key) === normalizedAccents) {
          mapped = key;
          break;
        }
      }
    }
  }
  
  return igazolasTypes[mapped] || igazolasTypes['egy√©b'];
}
