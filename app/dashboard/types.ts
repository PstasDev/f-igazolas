// Types for table display (mapped from API types)

export interface IgazolasTableRow {
  id: string;
  studentId: string;
  studentName: string;
  studentClass: string;
  type: string;
  date: string;
  startDate: string; // ISO date string for multi-day support
  endDate: string;   // ISO date string for multi-day support
  hours: number[];
  correctedHours?: number[]; // Added for student corrections
  status: string;
  reason?: string; // Student's reason/note - separate from status
  imageUrl?: string;
  imgDriveURL?: string; // Added to match API response
  bkk_verification?: string | object; // BKKVerification data (can be string or object)
  teacherNote?: string;
  submittedAt: string;
  reviewedAt?: string;
  reviewedBy?: string;
  allapot: 'F√ºgg≈ëben' | 'Elfogadva' | 'Elutas√≠tva'; // Updated to match Django model
  fromFTV?: boolean;
  minutesBefore?: number;
  minutesAfter?: number;
}

export interface IgazolasType {
  name: string;
  emoji: string;
  color: string;
  category: string;
  beleszamit: boolean;
  iskolaerdeku: boolean;
  description: string;
}

export const igazolasTypes: Record<string, IgazolasType> = {
  'st√∫di√≥s t√°voll√©t': {
    name: 'Studi√≥s T√°voll√©t',
    emoji: 'üé¨',
    color: 'bg-teal-100 text-teal-800 border-teal-300 dark:bg-teal-900/30 dark:text-teal-300 dark:border-teal-500',
    category: 'Iskola√©rdek≈± T√°voll√©t',
    beleszamit: false,
    iskolaerdeku: true,
    description: 'Ezen id≈ëpontban a tanul√≥ iskola√©rdek≈± tev√©kenys√©get v√©gzett a St√∫di√≥ keretein bel√ºl'
  },  
  'm√©di√°s t√°voll√©t': {
    name: 'M√©di√°s T√°voll√©t',
    emoji: 'üì∫',
    color: 'bg-blue-100 text-blue-800 border-blue-300 dark:bg-blue-900/30 dark:text-blue-300 dark:border-blue-500',
    category: 'Iskola√©rdek≈± T√°voll√©t',
    beleszamit: false,
    iskolaerdeku: true,
    description: 'Ezen id≈ëpontban a tanul√≥ iskola√©rdek≈±, M√©dia tagozattal kapcsolatos tev√©kenys√©get v√©gzett'
  },
  'orvosi igazol√°s': {
    name: 'Orvosi Igazol√°s',
    emoji: 'üè•',
    color: 'bg-red-100 text-red-800 border-red-300 dark:bg-red-900/30 dark:text-red-300 dark:border-red-500',
    category: 'Orvosi igazol√°s',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ orvosi kezel√©s alatt √°llt'
  },
  'csal√°di okok': {
    name: 'Csal√°di Okok',
    emoji: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
    color: 'bg-amber-100 text-amber-800 border-amber-300 dark:bg-amber-900/30 dark:text-amber-300 dark:border-amber-500',
    category: 'Sz√ºl≈ëi igazol√°s',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ csal√°di okok miatt volt t√°vol'
  },
  'k√∂zleked√©s': {
    name: 'K√∂zleked√©s',
    emoji: 'üöá',
    color: 'bg-purple-100 text-purple-800 border-purple-300 dark:bg-purple-900/30 dark:text-purple-300 dark:border-purple-500',
    category: 'K√∂zleked√©si probl√©ma',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ k√∂zleked√©si probl√©m√°k miatt nem tudott r√©szt venni az √≥r√°n'
  },
  'oktv': {
    name: 'OKTV',
    emoji: 'üéì',
    color: 'bg-orange-100 text-orange-800 border-orange-300 dark:bg-orange-900/30 dark:text-orange-300 dark:border-orange-500',
    category: 'OKTV',
    beleszamit: false,
    iskolaerdeku: true,
    description: 'A tanul√≥ Orsz√°gos K√∂z√©piskolai Tanulm√°nyi Versenyen vett r√©szt'
  },
  'sitabor': {
    name: 'S√≠t√°bor',
    emoji: '‚õ∑Ô∏è',
    color: 'bg-teal-100 text-teal-800 border-teal-300 dark:bg-teal-900/30 dark:text-teal-300 dark:border-teal-500',
    category: 'S√≠t√°bor',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ iskolai szervez√©s≈± s√≠t√°borban volt'
  },
  'utazas': {
    name: 'Utaz√°s',
    emoji: 'üèñÔ∏è',
    color: 'bg-teal-100 text-teal-800 border-teal-300 dark:bg-teal-900/30 dark:text-teal-300 dark:border-teal-500',
    category: 'Utaz√°s',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'A tanul√≥ a jelzett id≈ëpontban elutazott'
  },
  'igazgatoi': {
    name: 'Egy√©b Igazgat√≥i Enged√©ly',
    emoji: 'üìù',
    color: 'bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-800/30 dark:text-gray-300 dark:border-gray-500',
    category: 'Egy√©b',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'Igazgat√≥i enged√©llyel volt t√°vol a tanul√≥'
  },
  'egy√©b': {
    name: 'Egy√©b',
    emoji: 'üìù',
    color: 'bg-gray-100 text-gray-800 border-gray-300 dark:bg-gray-800/30 dark:text-gray-300 dark:border-gray-500',
    category: 'Egy√©b',
    beleszamit: true,
    iskolaerdeku: false,
    description: 'Egy√©b okok miatt volt t√°vol a tanul√≥'
  }
};

const typeMappings: Record<string, string> = {
  'sz√ºl≈ëi igazol√°s': 'csal√°di okok',
  'beteg': 'orvosi igazol√°s',
  'studi√≥s t√°voll√©t': 'st√∫di√≥s t√°voll√©t', // Handle version without accent
};

// Helper function to normalize Hungarian accented characters
function normalizeHungarianText(text: string): string {
  return text
    .toLowerCase()
    .replace(/√°/g, 'a')
    .replace(/√©/g, 'e')
    .replace(/√≠/g, 'i')
    .replace(/√≥/g, 'o')
    .replace(/√∂/g, 'o')
    .replace(/≈ë/g, 'o')
    .replace(/√∫/g, 'u')
    .replace(/√º/g, 'u')
    .replace(/≈±/g, 'u');
}

export function getIgazolasType(typeName: string): IgazolasType {
  const normalized = typeName.toLowerCase();
  
  // Try exact match first
  let mapped = typeMappings[normalized] || normalized;
  
  // If no exact match, try with normalized Hungarian characters
  if (!igazolasTypes[mapped]) {
    const normalizedAccents = normalizeHungarianText(normalized);
    mapped = typeMappings[normalizedAccents] || normalizedAccents;
    
    // Also check if we have a match when normalizing the keys
    if (!igazolasTypes[mapped]) {
      for (const key of Object.keys(igazolasTypes)) {
        if (normalizeHungarianText(key) === normalizedAccents) {
          mapped = key;
          break;
        }
      }
    }
  }
  
  return igazolasTypes[mapped] || igazolasTypes['egy√©b'];
}

// Helper function to check if an igazol√°s spans multiple days
export function isMultiDayAbsence(eleje: string, vege: string): boolean {
  const start = new Date(eleje);
  const end = new Date(vege);
  
  // Set both to midnight for comparison
  start.setHours(0, 0, 0, 0);
  end.setHours(0, 0, 0, 0);
  
  return start.getTime() !== end.getTime();
}

// Get all dates between start and end (inclusive)
export function getDateRange(eleje: string, vege: string): Date[] {
  const start = new Date(eleje);
  const end = new Date(vege);
  const dates: Date[] = [];
  
  const currentDate = new Date(start);
  currentDate.setHours(0, 0, 0, 0);
  
  const endDate = new Date(end);
  endDate.setHours(0, 0, 0, 0);
  
  while (currentDate <= endDate) {
    dates.push(new Date(currentDate));
    currentDate.setDate(currentDate.getDate() + 1);
  }
  
  return dates;
}

// Get day of week letter in Hungarian
export function getDayOfWeekLetter(date: Date): string {
  const days = ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Szo'];
  return days[date.getDay()];
}

// Get day of week name in Hungarian (short form)
export function getDayOfWeekShort(dayIndex: number): string {
  const days = ['V', 'H', 'K', 'Sze', 'Cs', 'P', 'Szo'];
  return days[dayIndex];
}

// Build calendar grid for date range
export interface CalendarDay {
  date: Date;
  dayOfMonth: number;
  isInRange: boolean;
  isDisabled: boolean;
}

export function buildCalendarGrid(startDate: string, endDate: string): CalendarDay[][] {
  const start = new Date(startDate);
  const end = new Date(endDate);
  
  // Set to start of day
  start.setHours(0, 0, 0, 0);
  end.setHours(0, 0, 0, 0);
  
  // Find the Monday of the week containing start date
  const firstDay = new Date(start);
  const dayOfWeek = firstDay.getDay();
  const diff = dayOfWeek === 0 ? -6 : 1 - dayOfWeek; // Monday = 1
  firstDay.setDate(firstDay.getDate() + diff);
  
  // Find the Sunday of the week containing end date
  const lastDay = new Date(end);
  const lastDayOfWeek = lastDay.getDay();
  const lastDiff = lastDayOfWeek === 0 ? 0 : 7 - lastDayOfWeek;
  lastDay.setDate(lastDay.getDate() + lastDiff);
  
  const weeks: CalendarDay[][] = [];
  const currentDate = new Date(firstDay);
  
  while (currentDate <= lastDay) {
    const week: CalendarDay[] = [];
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(currentDate);
      const isInRange = date >= start && date <= end;
      const isDisabled = !isInRange;
      
      week.push({
        date: new Date(date),
        dayOfMonth: date.getDate(),
        isInRange,
        isDisabled
      });
      
      currentDate.setDate(currentDate.getDate() + 1);
    }
    
    weeks.push(week);
  }
  
  return weeks;
}
